{"version":3,"sources":["components/Options.js","components/Run.js","components/Files.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Options","useState","lableSet","Item","key","onClick","style","color","marginBottom","marginTop","ipcRenderer","window","require","Run","props","iconLoading","iconLoadingSet","enterIconLoading","value","className","type","loading","send","folderPath","dialog","remote","Files","width","addonAfter","showOpenDialog","title","properties","then","files","undefined","folderPathSet","filePaths","toString","Header","id","getCurrentWindow","minimize","close","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAsBeA,MAnBf,WAAoB,IAAD,EACWC,mBAAS,SADpB,mBACDC,GADC,WASf,OALI,kBAAC,IAAD,KACE,kBAAC,IAAKC,KAAN,CAAWC,IAAI,IAAIC,QAAS,kBAAIH,EAAS,WAAzC,SACA,kBAAC,IAAKC,KAAN,CAAWC,IAAI,IAAIC,QAAS,kBAAIH,EAAS,YAAzC,WAIF,wBAAII,MAAO,CAACC,MAAM,aAAcC,aAAa,OAAQC,UAAW,QAAhE,e,QCXAC,EAAgBC,OAAOC,QAAQ,YAA/BF,YA6BOG,MA3Bf,SAAaC,GAAQ,IAAD,EAEsBb,oBAAS,GAF/B,mBAETc,EAFS,KAEIC,EAFJ,KAIZC,EAAmB,SAACC,GACtBF,EAAeE,IASjB,OACE,kBAAC,IAAD,CACAC,UAAU,UACVb,MAAO,CAACG,UAAW,OAAQD,aAAa,QACxCY,KAAK,UACLC,QAASN,EACTV,QAZF,WACIY,GAAiB,GACjBP,EAAYY,KAAK,QAASR,EAAMS,YAChCN,GAAiB,KAInB,Q,iBChBEO,EAAWb,OAAOC,QAAQ,YAAYa,OAAtCD,OAyBOE,MAtBf,SAAeZ,GAWX,OACI,6BACI,kBAAC,IAAD,CACIR,MAAO,CAACqB,MAAO,SACfC,WAAY,kBAAC,IAAD,CAAMR,KAAK,SAASf,QAAS,WAZjDmB,EAAOK,eAAe,CAAEC,MAAM,kBAC9BC,WAAY,CAAC,mBAAmBC,MAAK,SAAAC,QACpBC,GAATD,GACAnB,EAAMqB,cAAcF,EAAMG,UAAU,GAAGC,kBAUvCnB,MAAOJ,EAAMS,eCpBrBE,EAAWd,OAAOC,QAAQ,YAA1Ba,OAoBOa,MAlBf,SAAgBxB,GAUZ,OACI,yBAAKyB,GAAG,UACJ,yBAAKpB,UAAU,SAASd,QAAS,WATrCoB,EAAOe,mBAAmBC,aAStB,KACA,yBAAKtB,UAAU,SAASd,QAAS,WANrCoB,EAAOe,mBAAmBE,UAMtB,OCOGC,MAhBf,WAAgB,IAAD,EAEuB1C,qBAFvB,mBAENsB,EAFM,KAEMY,EAFN,KAIb,OACE,yBAAKI,GAAG,OACN,yBAAKA,GAAG,aACN,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOhB,WAAYA,EAAYY,cAAeA,IAC9C,kBAAC,EAAD,CAAKZ,WAAYA,OCNLqB,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.ea9f8872.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Button, Menu, Dropdown, Icon } from 'antd';\r\n\r\nfunction Options() { \r\n    const [lable, lableSet] = useState(\"Merge\")\r\n\r\n    const menu = (\r\n        <Menu>\r\n          <Menu.Item key=\"1\" onClick={()=>lableSet(\"Merge\")}>Merge</Menu.Item>\r\n          <Menu.Item key=\"2\" onClick={()=>lableSet(\"Rename\")}>Rename</Menu.Item>\r\n        </Menu>\r\n      );\r\n    return (\r\n        <h1 style={{color:'whitesmoke', marginBottom:'auto', marginTop: '0px'}}>PDF Merger</h1>\r\n        // <Dropdown overlay={menu} className=\"buttons\">\r\n        //     {/* <Button>\r\n        //         {lable} <Icon type=\"down\" />\r\n        //     </Button> */}\r\n        // </Dropdown>   \r\n    );\r\n}\r\n\r\nexport default Options;\r\n","import React, {useState} from 'react';\r\nimport { Button } from 'antd';\r\nconst { ipcRenderer } = window.require('electron');\r\n\r\nfunction Run(props) { \r\n\r\n    const [iconLoading, iconLoadingSet] = useState(false)\r\n      \r\n    let enterIconLoading = (value) => {\r\n      iconLoadingSet(value)\r\n    };\r\n\r\n    function mergeTrigger(){\r\n        enterIconLoading(true)\r\n        ipcRenderer.send('merge', props.folderPath)\r\n        enterIconLoading(false)\r\n    }\r\n\r\n    return (\r\n      <Button\r\n      className=\"buttons\"\r\n      style={{marginTop: \"auto\", marginBottom:\"30px\"}}\r\n      type=\"primary\"\r\n      loading={iconLoading}\r\n      onClick={mergeTrigger}\r\n      >\r\n        Run\r\n      </Button>\r\n    );\r\n}\r\n\r\nexport default Run;\r\n","import React, {useState} from 'react';\r\nimport { Input, Icon } from 'antd';\r\n\r\nconst { dialog } = window.require('electron').remote;\r\n\r\n\r\nfunction Files(props) { \r\n\r\n    function folderPath(){ \r\n        dialog.showOpenDialog({ title:\"Select a folder\",\r\n        properties: [\"openDirectory\"]}).then(files=>{\r\n            if (files != undefined){\r\n                props.folderPathSet(files.filePaths[0].toString())\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Input \r\n                style={{width: '400px'}}\r\n                addonAfter={<Icon type=\"folder\" onClick={()=>folderPath('SAVE')}/>} \r\n                value={props.folderPath}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Files;\r\n","import React from 'react';\r\n\r\nconst { remote } = window.require('electron');\r\n\r\nfunction Header(props) { \r\n\r\n    let minimize =()=>{\r\n        remote.getCurrentWindow().minimize()\r\n    }\r\n\r\n    let close=()=>{\r\n        remote.getCurrentWindow().close()\r\n    }\r\n\r\n    return (\r\n        <div id='header'>\r\n            <div className='header' onClick={()=>minimize()}>-</div>\r\n            <div className='header' onClick={()=>close()}>x</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport Options from \"./components/Options\"\nimport Run from \"./components/Run\"\nimport Files from \"./components/Files\"\nimport Header from \"./components/Header\"\n\nfunction App() { \n\n  const [folderPath, folderPathSet] = useState()\n\n  return (\n    <div id=\"app\">\n      <div id=\"container\">\n        <Header/>\n        <Options />\n        <Files folderPath={folderPath} folderPathSet={folderPathSet} />\n        <Run folderPath={folderPath} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}